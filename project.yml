---
version: 1.0.0

matrix:
  run:
    - # Execution 1: LandCoverAI w/ AutoEncoder
      dataset: LandCoverAI
      model: AutoEncoder

    - # Execution 2: LandCoverAI w/ DCGAN discriminator
      dataset: LandCoverAI
      model: DCGANDiscriminator

    - # Execution 3: LandCoverAI w/ izi architecture
      dataset: LandCoverAI
      model: Izi

    - # Execution 4: LandCoverAI w/ ziz architecture
      dataset: LandCoverAI
      model: Ziz

    - # Execution 5: LandCoverAI w/ BiGAN architecture
      dataset: LandCoverAI
      model: BiGAN

    - # Execution 6: LandCoverAI w/ f-AnoGAN architecture
      dataset: LandCoverAI
      model: f-AnoGAN

    - # Execution 7: LandCoverAI w/ DualAnoDAE architecture
      dataset: LandCoverAI
      model: DualAnoDAE

    - # Execution 8: HRC_WHU w/ AutoEncoder
      dataset: HRC_WHU
      model: AutoEncoder

    - # Execution 9: HRC_WHU w/ DCGAN discriminator
      dataset: HRC_WHU
      model: DCGANDiscriminator

    - # Execution 10: HRC_WHU w/ izi architecture
      dataset: HRC_WHU
      model: Izi

    - # Execution 11: HRC_WHU w/ ziz architecture
      dataset: HRC_WHU
      model: Ziz

    - # Execution 12: HRC_WHU w/ BiGAN architecture
      dataset: HRC_WHU
      model: BiGAN

    - # Execution 13: HRC_WHU w/ f-AnoGAN architecture
      dataset: HRC_WHU
      model: f-AnoGAN

    - # Execution 14: LandCoverAI w/ DualAnoDAE architecture
      dataset: HRC_WHU
      model: DualAnoDAE

datasets:
  - name: LandCoverAI
    folder: 'data/download/LandCoverAI'
    params:
      processed_folder: 'data/processed/LandCoverAI'

  - name: HRC_WHU
    folder: 'data/download/HRC_WHU'
    params:
      processed_folder: 'data/processed/HRC_WHU'

models:
  - name: AutoEncoder
    src: 'src/aerial_anomaly_detection/models/autoencoder.py:AutoEncoder'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      trained_weights: '{run_folder}/AutoEncoder/{matrix.run.dataset}/train/best.pth'

  - name: DCGANDiscriminator
    src: 'src/aerial_anomaly_detection/models/utils/dcgan_discriminator.py:Discriminator'
    params:
      img_width: 32
      img_height: 32
      trained_weights: '{run_folder}/DCGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/discriminator.pth'

  - name: Izi
    src: 'src/aerial_anomaly_detection/models/izi.py:Izi'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      pretrained_decoder_weights_path: '{run_folder}/DCGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/generator.pth'
      trained_weights: '{run_folder}/Izi/{matrix.run.dataset}/train/best.pth'

  - name: Ziz
    src: 'src/aerial_anomaly_detection/models/ziz.py:Ziz'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      pretrained_decoder_weights_path: '{run_folder}/DCGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/generator.pth'
      trained_weights: '{run_folder}/Ziz/{matrix.run.dataset}/train/best.pth'

  - name: BiGAN
    src: 'src/aerial_anomaly_detection/models/bigan.py:BiGAN'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      pretrained_encoder_weights_path: '{run_folder}/BiGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/encoder.pth'
      pretrained_generator_weights_path: '{run_folder}/BiGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/generator.pth'
      pretrained_discriminator_weights_path: '{run_folder}/BiGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/discriminator.pth'

  - name: f-AnoGAN
    src: 'src/aerial_anomaly_detection/models/f_anogan.py:FAnoGAN'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      pretrained_decoder_weights_path: '{run_folder}/DCGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/generator.pth'
      pretrained_discriminator_weights_path: '{run_folder}/DCGAN/{matrix.run.dataset}/train/epoch_{n_epochs}/discriminator.pth'
      trained_weights: '{run_folder}/f-AnoGAN/{matrix.run.dataset}/train/best.pth'

  - name: LowLevelAnoDAE
    src: 'src/aerial_anomaly_detection/models/dual_ae.py:LowLevelAnoDAE'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      trained_weights: '{run_folder}/LowLevelAnoDAE/{matrix.run.dataset}/train/best.pth'

  - name: HighLevelAnoDAE
    src: 'src/aerial_anomaly_detection/models/dual_ae.py:HighLevelAnoDAE'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      trained_weights: '{run_folder}/HighLevelAnoDAE/{matrix.run.dataset}/train/best.pth'

  - name: DualAnoDAE
    src: 'src/aerial_anomaly_detection/models/dual_ae.py:DualAnoDAE'
    params:
      latent_dimension: 1000
      img_width: 32
      img_height: 32
      low_level_anodae_weights: '{run_folder}/LowLevelAnoDAE/{matrix.run.dataset}/train/best.pth'
      high_level_anodae_weights: '{run_folder}/HighLevelAnoDAE/{matrix.run.dataset}/train/best.pth'

params:
  run_folder: 'runs'
  batch_size: 256
  n_epochs: 200

jobs:
  - name: Preprocess LandCover.ai dataset
    dataset: LandCoverAI
    steps:

      - name: Setup LandCover.ai dataset
        python-module: aerial_anomaly_detection.preprocess.setup.landcover_ai
        if:
          not_file: '{dataset.params.processed_folder}/scene_index.csv'

      - name: Scene tiling
        python-module: aerial_anomaly_detection.preprocess.tile.landcover_ai
        params:
          tile_width: 32
          tile_height: 32
          tile_x_step: 32
          tile_y_step: 32
          test_tiles_per_type_and_scene: 100
        if:
          not_file: '{dataset.params.processed_folder}/tile_index.csv'

      - name: Tile partitioning
        python-module: aerial_anomaly_detection.preprocess.partition.default_partitioning
        params:
          train_pct: 0.8

  - name: Preprocess HRC_WHU dataset
    dataset: HRC_WHU
    steps:

      - name: Setup HRC_WHU dataset
        python-module: aerial_anomaly_detection.preprocess.setup.hrc_whu
        params:
          test_pct: 0.2
        if:
          not_file: '{dataset.params.processed_folder}/scene_index.csv'

      - name: Scene tiling
        python-module: aerial_anomaly_detection.preprocess.tile.hrc_whu
        params:
          tile_width: 32
          tile_height: 32
          tile_x_step: 32
          tile_y_step: 32
          test_tiles_per_type_and_scene: 10
        if:
          not_file: '{dataset.params.processed_folder}/tile_index.csv'

      - name: Tile partitioning
        python-module: aerial_anomaly_detection.preprocess.partition.default_partitioning
        params:
          train_pct: 0.8

  - name: Train DCGAN components
    dataset: '{matrix.run.dataset}'
    steps:
    - name: DCGAN Training
      python-module: aerial_anomaly_detection.train.train_dcgan
      params:
        out_folder: '{run_folder}/DCGAN/{dataset.name}/train'
        latent_dimension: 1000
        img_width: 32
        img_height: 32
        n_epochs: '{n_epochs}'
        start_epoch: 1
        epochs_per_save: 10
        num_evaluation_images: 64
        learning_rate: 0.0001
    if:
      not_file: '{run_folder}/DCGAN/{dataset.name}/train/epoch_{n_epochs}/sample_generated_images.png'

  - name: Train BiGAN components
    dataset: '{matrix.run.dataset}'
    steps:
    - name: BiGAN Training
      python-module: aerial_anomaly_detection.train.train_bigan
      params:
        out_folder: '{run_folder}/BiGAN/{dataset.name}/train'
        latent_dimension: 1000
        img_width: 32
        img_height: 32
        n_epochs: '{n_epochs}'
        start_epoch: 1
        epochs_per_save: 10
        num_evaluation_images: 64
        learning_rate: 0.0001
    if:
      not_file: '{run_folder}/BiGAN/{dataset.name}/train/epoch_{n_epochs}/sample_generated_images.png'

  - name: Train DualAnoDAE components
    dataset: '{matrix.run.dataset}'
    steps:
      - name: Low Level AnoDAE Training
        model: LowLevelAnoDAE
        python-module: aerial_anomaly_detection.train.train_model
        params:
          learning_rate: 0.0001
        if:
          not_file: '{run_folder}/{model.name}/{dataset.name}/train/best.pth'

      - name: High Level AnoDAE Training
        model: HighLevelAnoDAE
        python-module: aerial_anomaly_detection.train.train_model
        params:
          learning_rate: 0.0001
        if:
          not_file: '{run_folder}/{model.name}/{dataset.name}/train/best.pth'

  - name: Train anomaly detectors
    dataset: '{matrix.run.dataset}'
    model: '{matrix.run.model}'
    params:
      out_folder: '{run_folder}/{model.name}/{dataset.name}/train'
    steps:
      - name: Generic model training
        python-module: aerial_anomaly_detection.train.train_model
        params:
          learning_rate: 0.0001
    if:
      not_file: '{run_folder}/{model.name}/{dataset.name}/train/best.pth'

  - name: Evaluation
    dataset: '{matrix.run.dataset}'
    model: '{matrix.run.model}'
    params:
      out_folder: '{run_folder}/{model.name}/{dataset.name}/inference'
    steps:
      - name: Generic model evaluation
        python-module: aerial_anomaly_detection.evaluation.evaluate_model
        params:
          tile_width: 32
          tile_height: 32
          tile_x_step: 32
          tile_y_step: 32
        if:
          not_file: '{out_folder}/global_metrics.csv'